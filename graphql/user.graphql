extend type Query {
  "Select User width auth"
  me: User! @guard @auth

  "List all users."
  users: [User!]! @all @guard 
}


extend type Mutation {
  createUser(
    name: String!,
    email: String!,
    last_name: String!,
    teacher: Boolean!,
    password: String!,
  ): User! @create

  updateUser(
    id: ID!, 
    name: String,
    email: String,
    last_name: String,
    teacher: Boolean,
    password: String,
    # article: UpdateArticleHasMany,
    # courseslist: UpdateCourseCreateHasMany,
    courses: UpdateCourseBelongsToMany
  ): User @update @guard 

  deleteUser(id: ID! @whereKey): User @delete @guard 
}

input UpdateCourseBelongsToMany {
  "create cour on user"
  create: [CreateCourseInput!]
  "attach course on user"
  connect: [ID!]
  "detache course on user"
  disconnect: [ID!]
  "update course attach"
  update: [UpdateCourseInput!]
}

input CreateCourseInput {
  name: String!,
  slug: String!,
  content: String!,
  teacher_id: ID!,
  category_id: ID!,
  url_course_video: String!,
  external_link: String!,
}

input UpdateCourseInput {
  id: ID!,
  name: String,
  slug: String,
  content: String,
  teacher_id: ID,
  category_id: ID,
  url_course_video: String,
  external_link: String,
}

type User {
  id: ID!
  name: String!
  email: String!
  last_name: String!
  teacher: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
  courses: [Course]! @belongsToMany
  courseslist: [Course]! @hasMany
  article: [Article]! @hasMany
  user_banking: UserBanking @hasOne
}

type UserPaginator {
  paginatorInfo: PaginatorInfo
  data: [User!]
}

type PaginatorInfo {
  count: Int!
  currentPage: Int!
  firstItem: Int
  hasMorePages: Boolean!
  lastItem: Int
  lastPage: Int!
  perPage: Int!
  total: Int!
}

type UserBanking {
  id: ID!
  iban: String!
  bic: String!
  created_at: DateTime!
  updated_at: DateTime!
}

# type Subscription {
#   id: ID!
#   user_id: String!
#   expiration_date: DateTime!
#   created_at: DateTime!
#   updated_at: DateTime!
# }
